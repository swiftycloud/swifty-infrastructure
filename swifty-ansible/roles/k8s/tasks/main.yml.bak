- name: Add Kubernetes yum repository
  yum_repository:
    name: Kubernetes
    description: Kubernetes Repository
    file: kubernetes
    baseurl: http://yum.kubernetes.io/repos/kubernetes-el7-x86_64
    enabled: yes
    gpgcheck: no
  when: (ansible_distribution == "Fedora")

- name: Install apt-transport-https, curl packages
  package:
    name:
      - apt-transport-https
      - curl
    state: latest
  when: (ansible_distribution == "Ubuntu")

- name: Add k8s GPG key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  when: (ansible_distribution == "Ubuntu")

- name: Add Kubernetes apt repository
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
  when: (ansible_distribution == "Ubuntu")

- name: Update repositories cache
  apt:
    update_cache: yes
  when: (ansible_distribution == "Ubuntu")

- name: Install kubernetes packages
  package:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: latest

- name: Disable system swap
  shell: "swapoff -a"

- name: Remove current swaps from fstab
  lineinfile:
    dest: /etc/fstab
    regexp: '(?i)^([^#][\S]+\s+(none|swap)\s+swap.*)'
    line: '# \1'
    backrefs: yes
    state: present

- name: Disable swappiness
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { name: 'vm.swappiness', value: '0' }

- name: Enable and restart kubelet engine
  systemd:
    name: kubelet
    daemon_reload: yes
    state: started
    enabled: yes

- name: ensure net.bridge.bridge-nf-call-iptables is set to 1
  shell: |
    cat <<EOF >  /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables = 1
    EOF
    sysctl --system

- name: pull k8s images
 #shell: kubeadm config images pull --kubernetes-version=v1.13.0
  shell: kubeadm config images pull --kubernetes-version=v1.18.0

- name: Init Kubernetes cluster
  shell: |
    kubeadm init --pod-network-cidr {{ pod_network_cidr }} \
                 --apiserver-advertise-address {{ hostvars[groups['gw'][0]]['private_ip'] }} \
#                 --kubernetes-version=v1.14.1 \
                 --token {{ token }}
  tags: master

- name: Create Kubernetes config directory
  file: path="~/.kube/" state=directory
  tags: master

- name: Change permissions of .kube/config
  file: path=/etc/kubernetes/admin.conf mode=0775
  tags: master

- name: Copy admin.conf to Home directory
  copy:
    src: "{{ kubeadmin_config }}"
    dest: "~/.kube/config"
    owner: root
    group: root
    mode: 0755
    remote_src: True
  tags: master

- name: create flannel network
  shell: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"
  tags: master


# This is part for workers

- name: Add Kubernetes yum repository
  yum_repository:
    name: Kubernetes
    description: Kubernetes Repository
    file: kubernetes
    baseurl: http://yum.kubernetes.io/repos/kubernetes-el7-x86_64
    enabled: yes
    gpgcheck: no
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"
  when: (ansible_distribution == "Fedora")

- name: Install apt-transport-https, curl packages
  package:
    name:
      - apt-transport-https
      - curl
    state: latest
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"
  when: (ansible_distribution == "Ubuntu")

- name: Add k8s GPG key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"
  when: (ansible_distribution == "Ubuntu")

- name: Add Kubernetes apt repository
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"
  when: (ansible_distribution == "Ubuntu")

- name: Update repositories cache
  apt:
    update_cache: yes
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"
  when: (ansible_distribution == "Ubuntu")

- name: Install kubernetes packages
  package:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: latest
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: Disable system swap
  shell: "swapoff -a"
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: Remove current swaps from fstab
  lineinfile:
    dest: /etc/fstab
    regexp: '(?i)^([^#][\S]+\s+(none|swap)\s+swap.*)'
    line: '# \1'
    backrefs: yes
    state: present
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: Disable swappiness
  sysctl:
    name: vm.swappiness
    value: 0
    state: present
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: Enable and restart kubelet engine
  systemd:
    name: kubelet
    daemon_reload: yes
    state: started
    enabled: yes
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: ensure net.bridge.bridge-nf-call-iptables is set to 1
  shell: |
    cat <<EOF >  /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables = 1
    EOF
    sysctl --system
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: Join to Kubernetes clusters
  tags: worker
  shell: |
    kubeadm join  --ignore-preflight-errors=all\
                 --token {{ token }} \
                 {{ hostvars[groups['gw'][0]]['private_ip'] }}:6443 \
                 --discovery-token-unsafe-skip-ca-verification
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: Enable and restart kubelet engine
  systemd:
    name: kubelet
    daemon_reload: yes
    state: started
    enabled: yes
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: pull golang image
  shell: docker pull registry.gitlab.com/swiftyteam/swifty/golang
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: pull swift image
  shell: docker pull registry.gitlab.com/swiftyteam/swifty/swift
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: pull python image
  shell: docker pull registry.gitlab.com/swiftyteam/swifty/python
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: pull nodejs image
  shell: docker pull registry.gitlab.com/swiftyteam/swifty/nodejs
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: pull ruby image
  shell: docker pull registry.gitlab.com/swiftyteam/swifty/ruby
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"

- name: pull csharp image
  shell: docker pull registry.gitlab.com/swiftyteam/swifty/csharp
  delegate_to: "{{item}}"
  with_items: "{{ groups['worker'] }}"
